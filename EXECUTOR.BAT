@ECHO OFF

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

REM Copyright 2007 Takuomi Kagaya
REM 
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM 
REM     http://www.apache.org/licenses/LICENSE-2.0
REM 
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

REM BALOCK - Batch Logger Component Framework
REM   Executor Component
REM
REM Usage:
REM   CALL %BALOCK_EXECUTOR% METHOD class method
REM   CALL %BALOCK_EXECUTOR% COMMAND command
REM
REM       class  Execute class name. if filename EXECUTOR:BAT is EXECUTOR:
REM      method  Execute method name.
REM     command  Executable command

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

CALL :SETENV
FOR %%I IN (%BALOCK_PUBLIC_METHOD%) DO IF "%1"=="%%I" CALL :%* & EXIT /B
CALL :EXCEPTION - IllegalArgumentException: %*
EXIT /B

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

REM SETENV
:SETENV
SET BALOCK_CLASS_NAME=EXECUTOR
SET BALOCK_PUBLIC_METHOD=METHOD,COMMAND,SET_STDOUT_REDIRECT,SET_STDERR_REDIRECT
GOTO :EOF

REM EXCEPTION
:EXCEPTION
ECHO BALOCK EXECUTOR:%*
PAUSE
GOTO :EOF

REM METHOD
:METHOD
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:METHOD] BEGIN
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:METHOD] EXECUTE: CALL %*
CALL %*
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:METHOD] END
GOTO :EOF

REM COMMAND
:COMMAND
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:COMMAND] BEGIN
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] CD=%CD%
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] STDOUT_REDIRECT: %BALOCK_EXECUTOR_STDOUT_REDIRECT%
CALL :VALIDATE_STDOUT_REDIRECT
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] STDERR_REDIRECT: %BALOCK_EXECUTOR_STDERR_REDIRECT%
CALL :VALIDATE_STDERR_REDIRECT
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] EXECUTE: %*
SET ERRORLEVEL=
CD 1>nul
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%" 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%"
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%" 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%" 2>nul
    )
)
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="STD" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 2>>"%BALOCK_LOGGER_LOGFILE%"
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %*
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 2>>"%BALOCK_LOGGER_LOGFILE%"
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 2>nul
    )
)
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="LOG" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%" 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%"
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%" 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 1>>"%BALOCK_LOGGER_LOGFILE%" 2>nul
    )
)
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="NUL" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 1>nul 2>>"%BALOCK_LOGGER_LOGFILE%"
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %* 1>nul
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 1>nul 2>>"%BALOCK_LOGGER_LOGFILE%"
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 1>nul 2>&1
    )
)
SET BALOCK_ERRORLEVEL=%ERRORLEVEL%
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] ERRORLEVEL=%BALOCK_ERRORLEVEL%
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:COMMAND] END
GOTO :EOF

REM SET_STDOUT_REDIRECT
:SET_STDOUT_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDOUT_REDIRECT] BEGIN
SET BALOCK_EXECUTOR_STDOUT_REDIRECT=
IF NOT "%1"=="" (
    IF "%1"=="STD" (
        SET BALOCK_EXECUTOR_STDOUT_REDIRECT=STD
    )
    IF "%1"=="LOG" (
        SET BALOCK_EXECUTOR_STDOUT_REDIRECT=LOG
    )
    IF "%1"=="NUL" (
        SET BALOCK_EXECUTOR_STDOUT_REDIRECT=NUL
    )
) ELSE (
    CALL :EXCEPTION SET_STDOUT_REDIRECT IllegalArgumentException: %1
)
IF NOT DEFINED BALOCK_EXECUTOR_STDOUT_REDIRECT (
    CALL :EXCEPTION SET_STDOUT_REDIRECT IllegalArgumentException: %1
)
SET BALOCK_ERRORLEVEL=%ERRORLEVEL%
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDOUT_REDIRECT] END
GOTO :EOF

REM SET_STDERR_REDIRECT
:SET_STDERR_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDERR_REDIRECT] BEGIN
SET BALOCK_EXECUTOR_STDERR_REDIRECT=
IF NOT "%1"=="" (
    IF "%1"=="STD" (
        SET BALOCK_EXECUTOR_STDERR_REDIRECT=STD
    )
    IF "%1"=="LOG" (
        SET BALOCK_EXECUTOR_STDERR_REDIRECT=LOG
    )
    IF "%1"=="NUL" (
        SET BALOCK_EXECUTOR_STDERR_REDIRECT=NUL
    )
) ELSE (
    CALL :EXCEPTION SET_STDERR_REDIRECT IllegalArgumentException: %1
)
IF NOT DEFINED BALOCK_EXECUTOR_STDERR_REDIRECT (
    CALL :EXCEPTION SET_STDERR_REDIRECT IllegalArgumentException: %1
)
SET BALOCK_ERRORLEVEL=%ERRORLEVEL%
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDERR_REDIRECT] END
GOTO :EOF

REM VALIDATE_STDOUT_REDIRECT [private]
:VALIDATE_STDOUT_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:VALIDATE_STDOUT_REDIRECT] BEGIN
SET BALOCK_EXECUTOR_STDOUT_VALID=
SET BALOCK_EXECUTOR_VALID_STDOUT_REDIRECT=STD,LOG,NUL
FOR %%I IN (%BALOCK_EXECUTOR_VALID_STDOUT_REDIRECT%) DO IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="%%I" SET BALOCK_EXECUTOR_STDOUT_VALID=TRUE
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="" SET BALOCK_EXECUTOR_STDOUT_VALID=TRUE
IF NOT "%BALOCK_EXECUTOR_STDOUT_VALID%"=="TRUE" CALL :EXCEPTION VALIDATE_STDOUT_REDIRECT IllegalArgumentException: %BALOCK_EXECUTOR_STDOUT_REDIRECT%
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:VALIDATE_STDOUT_REDIRECT] END
GOTO :EOF

REM VALIDATE_STDERR_REDIRECT [private]
:VALIDATE_STDERR_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:VALIDATE_STDERR_REDIRECT] BEGIN
SET BALOCK_EXECUTOR_STDERR_VALID=
SET BALOCK_EXECUTOR_VALID_STDERR_REDIRECT=STD,LOG,NUL
FOR %%I IN (%BALOCK_EXECUTOR_VALID_STDERR_REDIRECT%) DO IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="%%I" SET BALOCK_EXECUTOR_STDERR_VALID=TRUE
IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" SET BALOCK_EXECUTOR_STDERR_VALID=TRUE
IF NOT "%BALOCK_EXECUTOR_STDERR_VALID%"=="TRUE" CALL :EXCEPTION VALIDATE_STDERR_REDIRECT IllegalArgumentException: %BALOCK_EXECUTOR_STDERR_REDIRECT%
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:VALIDATE_STDERR_REDIRECT] END
GOTO :EOF
