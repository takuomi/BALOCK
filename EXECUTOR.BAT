@ECHO OFF

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

REM Copyright 2007 Takuomi Kagaya
REM 
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM 
REM     http://www.apache.org/licenses/LICENSE-2.0
REM 
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

REM BALOCK - Batch Logger Component Framework
REM   Executor Component
REM
REM Usage:
REM   CALL %BALOCK_EXECUTOR% METHOD class method
REM   CALL %BALOCK_EXECUTOR% COMMAND command
REM
REM       class  Execute class name. if filename EXECUTOR:BAT is EXECUTOR:
REM      method  Execute method name.
REM     command  Executable command

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

SETLOCAL
SET BALOCK_PUBLIC_LABEL=
SET BALOCK_PUBLIC_LABELS=METHOD,COMMAND,SET_STDOUT_REDIRECT,SET_STDERR_REDIRECT
FOR %%I IN (%BALOCK_PUBLIC_LABELS%) DO (
    IF "%~1"=="%%I" (
        SET BALOCK_PUBLIC_LABEL=TRUE
    )
)
IF NOT DEFINED BALOCK_PUBLIC_LABEL (
    ENDLOCAL
    CALL :EXCEPTION - IllegalArgumentException: %*
    EXIT /B
) ELSE (
    ENDLOCAL
    CALL :%* & EXIT /B
)

REM @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

REM EXCEPTION
:EXCEPTION
ECHO BALOCK EXECUTOR:%*
PAUSE
GOTO :EOF

REM SET_REDIRECT [private]
:SET_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_REDIRECT] BEGIN
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_REDIRECT] SOURCE: "%~1", DESTINATION: "%~2"
SET BALOCK_EXECUTOR_%~1_REDIRECT=
IF NOT "%~2"=="" (
    FOR %%I IN (STD,LOG,NUL) DO (
        IF "%~2"=="%%I" (
            SET BALOCK_EXECUTOR_%~1_REDIRECT=%%I
        )
    )
) ELSE (
    CALL :EXCEPTION SET_REDIRECT IllegalArgumentException: %~2
)
IF NOT DEFINED BALOCK_EXECUTOR_%~1_REDIRECT (
    CALL :EXCEPTION SET_REDIRECT IllegalArgumentException: %~2
)
SET BALOCK_ERRORLEVEL=%ERRORLEVEL%
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_REDIRECT] END
GOTO :EOF

REM SET_STDOUT_REDIRECT
:SET_STDOUT_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDOUT_REDIRECT] BEGIN
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:SET_STDOUT_REDIRECT] DESTINATION: "%~1"
CALL :SET_REDIRECT STDOUT %~1
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDOUT_REDIRECT] END
GOTO :EOF

REM SET_STDERR_REDIRECT
:SET_STDERR_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDERR_REDIRECT] BEGIN
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:SET_STDERR_REDIRECT] DESTINATION: "%~1"
CALL :SET_REDIRECT STDERR %~1
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:SET_STDERR_REDIRECT] END
GOTO :EOF

REM VALIDATE_REDIRECT [private]
:VALIDATE_REDIRECT
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:VALIDATE_REDIRECT] BEGIN
SETLOCAL ENABLEDELAYEDEXPANSION
SET BALOCK_EXECUTOR_%~1_VALID=
FOR %%I IN (STD,LOG,NUL) DO (
    IF "!BALOCK_EXECUTOR_%~1_REDIRECT!"=="%%I" (
        SET BALOCK_EXECUTOR_%~1_VALID=TRUE
    )
)
IF "!BALOCK_EXECUTOR_%~1_REDIRECT!"=="" (
    SET BALOCK_EXECUTOR_%~1_VALID=TRUE
)
IF NOT DEFINED BALOCK_EXECUTOR_%~1_VALID (
    CALL :EXCEPTION VALIDATE_REDIRECT IllegalArgumentException: !BALOCK_EXECUTOR_%~1_REDIRECT!
)
ENDLOCAL
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:VALIDATE_REDIRECT] END
GOTO :EOF

REM METHOD
:METHOD
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:METHOD] BEGIN
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:METHOD] EXECUTE: CALL %*
CALL %*
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:METHOD] END
GOTO :EOF

REM COMMAND
:COMMAND
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:COMMAND] BEGIN
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] CD=%CD%
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] STDOUT_REDIRECT: %BALOCK_EXECUTOR_STDOUT_REDIRECT%
CALL :VALIDATE_REDIRECT STDOUT
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] STDERR_REDIRECT: %BALOCK_EXECUTOR_STDERR_REDIRECT%
CALL :VALIDATE_REDIRECT STDERR
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] EXECUTE: %*
SET ERRORLEVEL=
CD 1>nul
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 1>>%BALOCK_LOGGER_LOGFILE% 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %* 1>>%BALOCK_LOGGER_LOGFILE%
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 1>>%BALOCK_LOGGER_LOGFILE% 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 1>>%BALOCK_LOGGER_LOGFILE% 2>nul
    )
)
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="STD" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 2>>%BALOCK_LOGGER_LOGFILE%
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %*
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 2>>%BALOCK_LOGGER_LOGFILE%
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 2>nul
    )
)
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="LOG" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 1>>%BALOCK_LOGGER_LOGFILE% 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %* 1>>%BALOCK_LOGGER_LOGFILE%
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 1>>%BALOCK_LOGGER_LOGFILE% 2>&1
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 1>>%BALOCK_LOGGER_LOGFILE% 2>nul
    )
)
IF "%BALOCK_EXECUTOR_STDOUT_REDIRECT%"=="NUL" (
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="" (
        %* 1>nul 2>>%BALOCK_LOGGER_LOGFILE%
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="STD" (
        %* 1>nul
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="LOG" (
        %* 1>nul 2>>%BALOCK_LOGGER_LOGFILE%
    )
    IF "%BALOCK_EXECUTOR_STDERR_REDIRECT%"=="NUL" (
        %* 1>nul 2>&1
    )
)
SET BALOCK_ERRORLEVEL=%ERRORLEVEL%
CALL %BALOCK_LOGGER% DEBUG [EXECUTOR:COMMAND] ERRORLEVEL=%BALOCK_ERRORLEVEL%
CALL %BALOCK_LOGGER% TRACE [EXECUTOR:COMMAND] END
GOTO :EOF
